#!/bin/bash -x

# Setup console and startup-script logging
mkdir -p  /var/log/cloud /config/cloud /var/config/rest/downloads /var/lib/cloud/icontrollx_installs
LOG_FILE=/var/log/cloud/startup-script.log
[[ -f $LOG_FILE ]] || /usr/bin/touch $LOG_FILE
npipe=/tmp/$$.tmp
/usr/bin/trap "rm -f $npipe" EXIT
/usr/bin/mknod $npipe p
/usr/bin/tee <$npipe -a $LOG_FILE /dev/ttyS0 &
exec 1>&-
exec 1>$npipe
exec 2>&1

# skip startup script if already complete
if [[ -f /config/startup_finished ]]; then
  echo "Onboarding complete, skip startup script"
  exit
fi


# Create runtime configuration on first boot
if [[ ! -f /config/nicswap_finished ]]; then
cat << 'EOF' > /config/cloud/runtime-init-conf.yaml
---
runtime_parameters:
  - name: USER_NAME
    type: static
    value: ${uname}
  - name: SSH_KEYS
    type: static
    value: "${ssh_keypair}"
EOF

if ${gcp_secret_manager_authentication}; then
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: secret
    secretProvider:
      environment: gcp
      type: SecretsManager
      version: latest
      secretId: ${bigip_password}
EOF
else
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: static
    value: ${bigip_password}
EOF
fi

cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
runtime_parameters:
  - name: HOST_NAME
    type: metadata
    metadataProvider:
      environment: gcp
      type: compute
      field: hostname
  - name: FAILOVER_LABEL
    type: static
    value: ${f5_cloud_failover_label}
  - name: MANAGED_ROUTE
    type: static
    value: ${cfe_managed_route}
  - name: BASE_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 0
      ipcalc: base
  - name: MASK_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 0
      ipcalc: mask
  - name: GATEWAY_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 0
      ipcalc: first
  - name: BASE_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 2
      ipcalc: base
  - name: MASK_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 2
      ipcalc: mask
  - name: GATEWAY_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 2
      ipcalc: first
  - name: SELF_IP_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 0
      ipcalc: address
  - name: SELF_IP_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: local-ipv4s
      index: 2
      ipcalc: address
  - name: REMOTE_SELFIP_EXT
    type: static
    value: ${remote_selfip_ext}
  - name: REMOTE_HOST
    type: static
    value: ${remote_host}
  - name: DNS_SERVER
    type: static
    value: ${dns_server}
  - name: NTP_SERVER
    type: static
    value: ${ntp_server}
  - name: TIMEZONE
    type: static
    value: ${timezone}
  - name: HOST1
    type: static
    value: ${host1}
  - name: HOST2
    type: static
    value: ${host2}
pre_onboard_enabled:
  - name: provision_rest
    type: inline
    commands:
      - /usr/bin/setdb provision.extramb 1024
      - /usr/bin/setdb restjavad.useextramb true
      - /usr/bin/setdb setup.run false
extension_packages:
  install_operations:
    - extensionType: do
      extensionVersion: ${DO_VER}
      extensionUrl: ${DO_URL}
    - extensionType: as3
      extensionVersion: ${AS3_VER}
      extensionUrl: ${AS3_URL}
    - extensionType: cf
      extensionVersion: ${CFE_VER}
      extensionUrl: ${CFE_URL}
extension_services:
  service_operations:
    - extensionType: do
      type: inline
      value:
        schemaVersion: 1.0.0
        class: Device
        async: true
        label: Onboard BIG-IP into an HA Pair
        Common:
          class: Tenant
          dbVars:
            class: DbVariables
            restjavad.useextramb: true
            provision.extramb: 1024
            config.allow.rfc3927: enable
            ui.advisory.enabled: true
            ui.advisory.color: blue
            ui.advisory.text: '{{{ HOST_NAME }}}'
          mySystem:
            autoPhonehome: true
            class: System
            hostname: '{{{ HOST_NAME }}}'
          '{{{ USER_NAME }}}':
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ ADMIN_PASS }}}'
            shell: bash
            userType: regular
            keys:
              - '{{{ SSH_KEYS }}}'
          myDns:
            class: DNS
            nameServers:
              - '{{{ DNS_SERVER }}}'
              - 2001:4860:4860::8844
            search:
              - f5.com
          myNtp:
            class: NTP
            servers:
              - '{{{ NTP_SERVER }}}'
              - 1.pool.ntp.org
              - 2.pool.ntp.org
            timezone: '{{{ TIMEZONE }}}'
          myProvisioning:
            class: Provision
            ltm: nominal
          external:
            class: VLAN
            tag: 4094
            mtu: 1460
            interfaces:
              - name: 1.0
                tagged: false
          external-localself:
            class: SelfIp
            address: '{{{ SELF_IP_EXTERNAL }}}/32'
            vlan: external
            allowService: default
            trafficGroup: traffic-group-local-only
          internal:
            class: VLAN
            tag: 4093
            mtu: 1460
            interfaces:
              - name: 1.2
                tagged: false
          internal-localself:
            class: SelfIp
            address: '{{{ SELF_IP_INTERNAL }}}/32'
            vlan: internal
            allowService: default
            trafficGroup: traffic-group-local-only
          ext_gw_interface:
            class: Route
            target: external
            network: '{{{ GATEWAY_EXTERNAL }}}/32'
            localOnly: true
            mtu: 1500
          ext_rt:
            class: Route
            gw: '{{{ GATEWAY_EXTERNAL }}}'
            network: '{{{ BASE_EXTERNAL }}}/{{{ MASK_EXTERNAL }}}'
            localOnly: true
            mtu: 1500
          default_ext:
            class: Route
            gw: '{{{ GATEWAY_EXTERNAL }}}'
            network: default
            localOnly: true
            mtu: 1500
          int_gw_interface:
            class: Route
            target: internal
            network: '{{{ GATEWAY_INTERNAL }}}/32'
            localOnly: true
            mtu: 1500
          int_rt:
            class: Route
            gw: '{{{ GATEWAY_INTERNAL }}}'
            network: '{{{ BASE_INTERNAL }}}/{{{ MASK_INTERNAL }}}'
            localOnly: true
            mtu: 1500
          configsync:
            class: ConfigSync
            configsyncIp: /Common/internal-localself/address
          failoverAddress:
            class: FailoverUnicast
            address: /Common/internal-localself/address
          failoverGroup:
            class: DeviceGroup
            type: sync-failover
            members:
              - '{{{ HOST1 }}}'
              - '{{{ HOST2 }}}'
            owner: /Common/failoverGroup/members/0
            autoSync: true
            saveOnAutoSync: false
            networkFailover: true
            fullLoadOnSync: false
            asmSync: false
          trust:
            class: DeviceTrust
            localUsername: '{{{ USER_NAME }}}'
            localPassword: '{{{ ADMIN_PASS }}}'
            remoteHost: '{{{ REMOTE_HOST }}}'
            remoteUsername: '{{{ USER_NAME }}}'
            remotePassword: '{{{ ADMIN_PASS }}}'
    - extensionType: as3
      type: inline
      value:
        class: AS3
        action: deploy
        persist: true
        declaration:
          class: ADC
          schemaVersion: 3.0.0
          label: Sample 1
          remark: A HTTP sample application
          Tenant_1:
            class: Tenant
            Service_1:
              class: Application
              template: http
              serviceMain:
                class: Service_HTTP
                virtualAddresses:
                  - ${publicvip}
                  - ${privatevip}
                pool: web_pool
              web_pool:
                class: Pool
                monitors:
                  - tcp
                members:
                  - servicePort: 80
                    addressDiscovery: fqdn
                    autoPopulate: true
                    hostname: httpbin.org
    - extensionType: cf
      type: inline
      value:
        class: Cloud_Failover
        environment: gcp
        externalStorage:
          scopingTags:
            f5_cloud_failover_label: '{{{ FAILOVER_LABEL }}}'
        failoverAddresses:
          enabled: true
          scopingTags:
            f5_cloud_failover_label: '{{{ FAILOVER_LABEL }}}'
        failoverRoutes:
          enabled: true
          scopingTags:
            f5_cloud_failover_label: '{{{ FAILOVER_LABEL }}}'
          scopingAddressRanges:
            - range: '{{{ MANAGED_ROUTE }}}'
          defaultNextHopAddresses:
            discoveryType: static
            items:
              - '{{{ SELF_IP_EXTERNAL }}}'
              - '{{{ REMOTE_SELFIP_EXT }}}'
post_onboard_enabled:
  - name: trigger_failover
    type: inline
    commands:
    - $(nohup bash /config/failover/tgactive &>/dev/null &)
    - $(nohup tmsh modify cm device-group failoverGroup devices modify { '{{{ HOST2 }}}' { set-sync-leader } } &>/dev/null &)
    - tmsh save sys config
EOF

# Create nic_swap script when multi nic on first boot
COMPUTE_BASE_URL="http://metadata.google.internal/computeMetadata/v1"

if [[ ${NIC_COUNT} && ! -f /config/nicswap_finished ]]; then
   cat << 'EOF' >> /config/cloud/nic_swap.sh
   #!/bin/bash
   source /usr/lib/bigstart/bigip-ready-functions
   wait_bigip_ready
   echo "before nic swapping"
   tmsh list sys db provision.1nicautoconfig
   tmsh list sys db provision.managementeth
   echo "after nic swapping"
   bigstart stop tmm
   tmsh modify sys db provision.managementeth value eth1
   tmsh modify sys db provision.1nicautoconfig value disable
   bigstart start tmm
   wait_bigip_ready
   echo "---Mgmt interface setting---"
   tmsh list sys db provision.managementeth
   tmsh list sys db provision.1nicautoconfig
   sed -i "s/iface0=eth0/iface0=eth1/g" /etc/ts/common/image.cfg
   echo "Done changing interface"
   echo "Set TMM networks"
   MGMTADDRESS=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/ip)
   MGMTMASK=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/subnetmask)
   MGMTGATEWAY=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/gateway)
   MGMTMTU=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/mtu)
   MGMTNETWORK=$(/bin/ipcalc -n $MGMTADDRESS $MGMTMASK | cut -d= -f2)
   echo $MGMTADDRESS
   echo $MGMTMASK
   echo $MGMTGATEWAY
   echo $MGMTMTU
   echo $MGMTNETWORK
   tmsh modify sys global-settings gui-setup disabled
   tmsh modify sys global-settings mgmt-dhcp disabled
   tmsh delete sys management-route all
   tmsh delete sys management-ip all
   tmsh create sys management-ip $${MGMTADDRESS}/32
   tmsh create sys management-route mgmt_gw network $${MGMTGATEWAY}/32 type interface mtu $${MGMTMTU}
   tmsh create sys management-route mgmt_net network $${MGMTNETWORK}/$${MGMTMASK} gateway $${MGMTGATEWAY} mtu $${MGMTMTU}
   tmsh create sys management-route default gateway $${MGMTGATEWAY} mtu $${MGMTMTU}
   tmsh modify sys global-settings remote-host add { metadata.google.internal { hostname metadata.google.internal addr 169.254.169.254 } }
   tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { ntp-servers }
   tmsh save /sys config
   /usr/bin/touch /config/nicswap_finished
   reboot
EOF
fi

# Create run_runtime_init.sh script on first boot
if [[ ! -f /config/nicswap_finished ]]; then
  cat << 'EOF' >> /config/cloud/run_runtime_init.sh
  #!/bin/bash
  source /usr/lib/bigstart/bigip-ready-functions
  wait_bigip_ready
  for i in {1..30}; do
    curl -fv --retry 1 --connect-timeout 5 -L ${INIT_URL} -o "/var/config/rest/downloads/f5-bigip-runtime-init.gz.run" && break || sleep 10
  done
  bash /var/config/rest/downloads/f5-bigip-runtime-init.gz.run -- '--cloud gcp' 2>&1
  /usr/local/bin/f5-bigip-runtime-init --config-file /config/cloud/runtime-init-conf.yaml 2>&1
  /usr/bin/touch /config/startup_finished
EOF
fi

# Run scripts based on number of nics
if ${NIC_COUNT}; then
  if [[ -f /config/nicswap_finished ]]; then
    echo "Running run_runtime_init.sh"
    chmod +x /config/cloud/run_runtime_init.sh
    nohup /config/cloud/run_runtime_init.sh &
  else
    chmod +x /config/cloud/nic_swap.sh
    nohup /config/cloud/nic_swap.sh &
  fi
else
    echo "Running run_runtime_init.sh"
    chmod +x /config/cloud/run_runtime_init.sh
    nohup /config/cloud/run_runtime_init.sh &
fi
